% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_calibration.R
\name{calibration.plot}
\alias{calibration.plot}
\title{Calibration plot}
\usage{
calibration.plot(
  matched.patients = NULL,
  g = 5,
  plot.CI = FALSE,
  show = TRUE,
  ...
)
}
\arguments{
\item{matched.patients}{dataframe; dataframe of matched patients, which contains a vector of predicted treatment effect (tau.hat), predicted treatment effect of matched patients (matched.tau.hat), and observed treatment effect (matched.tau.obs) of matched patients}

\item{g}{integer; indicating the number of groups in calibration plot}

\item{plot.CI}{boolean; TRUE if you want to plot the confidence interval of the calibration plot of predicted versus observed treatment effect of matched patients}

\item{show}{boolean; TRUE if you want to show the plot; FALSE if not}

\item{...}{additional arguments for loess function from loess package}
}
\value{
The output of the E.for.benefit function is a "list" with the following components.

matched.patients

a dataframe containing the matched patients.


build.plot

ggplot2 object of the plot.


quantiles

of treatment effect.


se.quantiles

standard error of quantiles of treatment effect.
}
\description{
This function calculates E-for-benefit statistics.  Please note,
this function is only applicable for binary outcomes.
}
\examples{
library(HTEPredictionMetrics)
set.seed(1)
n <- 100
Y <- sample(0:1, n, replace=TRUE)
W <- sample(0:1, n, replace=TRUE)
X <- matrix(rnorm(n), n, 4)
p.0 <- runif(n)
p.1 <- runif(n)
tau.hat <- runif(n)
EB.out <- E.for.Benefit(Y=Y, W=W, X=X, p.0=p.0, p.1=p.1, tau.hat=tau.hat,
                        CI=TRUE, nr.bootstraps=100, message=TRUE,
                        matched.patients=NULL,
                        measure="nearest", distance="mahalanobis",
                        estimand=NULL, replace=FALSE)
g <- 5
CP <- calibration.plot(matched.patients=EB.out$matched.patients, g=g,
                 plot.CI=TRUE, show=TRUE)
# Edit the calibration plot using ggplot, i.e.
CP$build.plot <- CP$build.plot+ggplot2::scale_x_continuous(limits=c(-1, 1))
show(CP)
}
